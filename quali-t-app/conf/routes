# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET           /                                  controllers.Application.index()

# TODO: check the GET route below are needed or not
# Map static resources from the /public folder to the /assets URL path
GET           /assets/*file                      controllers.Assets.at(path="/public", file)

GET           /app/bower_components/*file        controllers.ConfigurableAssets.at(path="/bower_components", file)
GET           /app/*file                         controllers.ConfigurableAssets.at(path="/app", file)

# QUALI-47: POC: Backend-Service erstellen und mit Client-App verbinden
GET           /api/get/nfr/first                 controllers.Application.getFirstQA()

# AUTHENTICATION
POST          /api/auth/login                    @controllers.Authentication.login()
POST          /api/auth/logout                   @controllers.Authentication.logout()
POST          /api/auth/register                 @controllers.Authentication.register()
POST          /api/auth/changePw                 @controllers.Authentication.changePassword()

# USER
GET           /api/mytasks/                      @controllers.Misc.getTasksOfCurrentUser()
POST          /api/mytasks/toggle/               @controllers.Misc.toggleStateOfTask()

# Favorites
GET           /api/myfavorites/                  @controllers.Misc.getFavoritesOfCurrentUser()
POST          /api/myfavorites                   @controllers.Misc.updateFavorite()


# Search
GET           /api/search/                       controllers.Search.search(searchArgument: String ?= "")
GET           /api/search/:searchArgument        controllers.Search.search(searchArgument: String)

# Testing
GET           /api/set/custproject/:cust         controllers.Application.setCustomerProject(cust: String)

# Customer
POST          /api/customer                      @controllers.Customer.createCustomer()
GET           /api/customer                      @controllers.Customer.getAll()
PUT           /api/customer                      @controllers.Customer.updateCustomer()
DELETE        /api/customer/:id                  @controllers.Customer.deleteCustomer(id: Long)

# Quality Attribute
POST          /api/qa                            controllers.QualityAttribute.createQA()
POST          /api/qa/clone/:id                controllers.QualityAttribute.cloneQA(id: Long)
GET           /api/qa                            controllers.QualityAttribute.getAllQAs()
GET           /api/qa/catalog/:id                controllers.QualityAttribute.getQAsByCatalog(id: Long)
GET           /api/qa/standardcatalog            controllers.QualityAttribute.getAllStandardCatalogQAs()
PUT           /api/qa                            controllers.QualityAttribute.updateQA()
DELETE        /api/qa/:id                        controllers.QualityAttribute.deleteQA(id: Long)

# Project
POST          /api/project                       controllers.Project.createProject()
GET           /api/project                       controllers.Project.getAllProjects()
GET           /api/project/:id                   controllers.Project.getProject(id: Long)
PUT           /api/project                       controllers.Project.updateProject()
DELETE        /api/project/:id                   controllers.Project.deleteProject(id: Long)
POST          /api/project/qa                    controllers.Project.createInstance()
POST          /api/project/qa/clone/:id        controllers.Project.cloneInstance(id: Long)
PUT           /api/project/qa                    controllers.Project.updateInstance()
DELETE        /api/project/qa/:id                controllers.Project.deleteInstance(id: Long)

# Catalog
GET           /api/catalog                       controllers.Catalog.getAllCatalogs()
POST          /api/catalog                       controllers.Catalog.createCatalog()
PUT           /api/catalog                       controllers.Catalog.updateCatalog()
DELETE        /api/catalog/:id                   controllers.Catalog.deleteCatalog(id: Long)
GET           /api/catalog/qa/:id              controllers.Catalog.getCatalogQA(id: Long)
POST          /api/catalog/qa                    controllers.Catalog.createCatalogQA()
PUT           /api/catalog/qa                    controllers.Catalog.updateCatalogQA()
DELETE        /api/catalog/qa/:id                controllers.Catalog.deleteCatalogQA(id: Long)

# QACategories
#GET         /api/cat/:parent,:name             controllers.QualityAttribute.createSubCat(parent: Long, name: String)
POST          /api/cat                           controllers.QACategory.createCat()
#GET         /api/cat/get/:id                   controllers.QualityAttribute.getCategoryTree(id: Long)
GET           /api/cat                           controllers.QACategory.getAllCats()
DELETE        /api/cat/:id                       controllers.QACategory.deleteCat(id: Long)
PUT           /api/cat                           controllers.QACategory.updateCat()

# QualityProperties
GET           /api/qp                            controllers.QualityProperty.getAllQualityProperties()
POST          /api/qp                            controllers.QualityProperty.createQualityProperty()
PUT           /api/qp                            controllers.QualityProperty.updateQualityProperty()
DELETE        /api/qp/:id                        controllers.QualityProperty.deleteQualityProperty(id: Long)

# JIRAConnections
GET           /api/jiraconnection              controllers.JIRAConnection.getAllJIRAConnections()
POST          /api/jiraconnection              controllers.JIRAConnection.createJIRAConnection()
PUT           /api/jiraconnection              controllers.JIRAConnection.updateJIRAConnection()
DELETE        /api/jiraconnection/:id          controllers.JIRAConnection.deleteJIRAConnection(id: Long)
